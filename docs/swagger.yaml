definitions:
  auth.UserDetails:
    properties:
      emailId:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      profilePic:
        type: string
    type: object
  models.Response:
    properties:
      data: {}
      message:
        type: string
      status:
        type: integer
    type: object
  project.CreateProjectDetails:
    properties:
      description:
        type: string
      name:
        type: string
      tags:
        type: string
    type: object
  project.ProjectDetails:
    properties:
      lastModifiedAt:
        type: string
      name:
        type: string
    type: object
info:
  contact: {}
  description: The backend service for the Arxiv insanity project.
  title: Arxiv Insanity Backend Service
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Endpoint for performing health check on the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Endpoint for Health Check
      tags:
      - Health Check
  /api/projects:
    get:
      consumes:
      - application/json
      description: Returns a list of objects that contain details of all the projects
        created by the user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/project.ProjectDetails'
            type: array
      summary: Endpoint for listing all the projects for the user
      tags:
      - Project
    post:
      consumes:
      - application/json
      description: Returns a status json that describes if the project was created
        successfully or not
      parameters:
      - description: Project Details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/project.CreateProjectDetails'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      summary: Endpoint for creating a new project
      tags:
      - Project
  /api/projects/{name}:
    delete:
      consumes:
      - application/json
      description: Returns a status json that describes if the project was deleted
        successfully.
      parameters:
      - description: Project name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      summary: Endpoint for deleting an existing project
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: Returns a status json that describes if the project was updated
        successfully.
      parameters:
      - description: Existing project name
        in: path
        name: name
        required: true
        type: string
      - description: Project Details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/project.CreateProjectDetails'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      summary: Endpoint for updating an existing project details
      tags:
      - Project
  /auth/getUserInfo:
    get:
      consumes:
      - application/json
      description: Checks if there is a cookie preset with the jwt token. If present,
        validates the token and then returns the user details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.UserDetails'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Endpoint for getting user details
      tags:
      - Auth
  /auth/google:
    get:
      consumes:
      - application/json
      description: Will redirect user to google OAuth consent screen
      parameters:
      - description: The url to redirect to after authentication
        in: query
        name: redirect_uri
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Endpoint for logging in the user using google Oauth 2
      tags:
      - Auth
  /auth/google/callback:
    get:
      consumes:
      - application/json
      description: Will handel the google OAuth call back and redirect to homepage
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Endpoint for handling the google OAuth callback
      tags:
      - Auth
  /auth/isLoggedIn:
    get:
      consumes:
      - application/json
      description: Checks if there is a cookie preset with the jwt token. If present,
        validates the token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Endpoint for checking if user is logged in
      tags:
      - Auth
swagger: "2.0"
