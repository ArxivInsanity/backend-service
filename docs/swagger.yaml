definitions:
  auth.UserDetails:
    properties:
      emailId:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      profilePic:
        type: string
    type: object
  models.Paper:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  models.Response:
    properties:
      data: {}
      message:
        type: string
      status:
        type: integer
    type: object
  project.CreateProjectDetails:
    properties:
      description:
        type: string
      name:
        type: string
      tags:
        items:
          type: string
        type: array
    type: object
  project.ProjectDetails:
    properties:
      lastModifiedAt:
        type: string
      name:
        type: string
    type: object
info:
  contact: {}
  description: The backend service for the Arxiv insanity project.
  title: Arxiv Insanity Backend Service
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Endpoint for performing health check on the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Endpoint for Health Check
      tags:
      - Health Check
  /api/graph/{id}:
    get:
      consumes:
      - application/json
      description: Endpoint to get the generated graph for a paper
      parameters:
      - description: The paper id
        in: path
        name: id
        required: true
        type: string
      - collectionFormat: csv
        description: The authors
        in: query
        items:
          type: string
        name: authors
        type: array
      - description: The min year
        in: query
        name: minYear
        type: string
      - description: The max year
        in: query
        name: maxYear
        type: string
      - description: The minimum number of citations
        in: query
        name: minCitation
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - Bearer: []
      summary: Retrieve graph for a paper
      tags:
      - Graph
  /api/papers/{id}:
    get:
      consumes:
      - application/json
      description: Endpoint to retrieve paper details given a paper id
      parameters:
      - description: The paper id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - Bearer: []
      summary: Retrieves paper details
      tags:
      - Papers
  /api/papers/autocomplete:
    get:
      consumes:
      - application/json
      description: Endpoint to retrieve autocomplete suggestions for papers that the
        user types in the search
      parameters:
      - description: The query to search for papers
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - Bearer: []
      summary: Autocomplete suggestions for paper search
      tags:
      - Papers
  /api/projects:
    get:
      consumes:
      - application/json
      description: Returns a list of objects that contain details of all the projects
        created by the user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/project.ProjectDetails'
            type: array
      security:
      - Bearer: []
      summary: Endpoint for listing all the projects for the user
      tags:
      - Project
    post:
      consumes:
      - application/json
      description: Returns a status json that describes if the project was created
        successfully or not
      parameters:
      - description: Project Details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/project.CreateProjectDetails'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - Bearer: []
      summary: Endpoint for creating a new project
      tags:
      - Project
  /api/projects/{name}:
    delete:
      consumes:
      - application/json
      description: Returns a status json that describes if the project was deleted
        successfully.
      parameters:
      - description: Project name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - Bearer: []
      summary: Endpoint for deleting an existing project
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: Returns a status json that describes if the project was updated
        successfully.
      parameters:
      - description: Existing project name
        in: path
        name: name
        required: true
        type: string
      - description: Project Details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/project.CreateProjectDetails'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - Bearer: []
      summary: Endpoint for updating an existing project details
      tags:
      - Project
  /api/projects/{name}/seedPapers:
    delete:
      consumes:
      - application/json
      description: Deleting a seed paper from the list of existing seed papers in
        the project
      parameters:
      - description: Project name
        in: path
        name: name
        required: true
        type: string
      - description: Seed paper details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Paper'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - Bearer: []
      summary: Endpoint removing a seed paper from project
      tags:
      - Project
    get:
      consumes:
      - application/json
      description: Returns a list of seed papers that have been saved for this project
      parameters:
      - description: Project name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      security:
      - Bearer: []
      summary: Endpoint for getting all the seed papers saved for the project
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: Adding a seed paper to the list of existing seed papers in the
        project
      parameters:
      - description: Project name
        in: path
        name: name
        required: true
        type: string
      - description: Seed paper details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Paper'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - Bearer: []
      summary: Endpoint to add a seed paper to a project
      tags:
      - Project
  /auth/getUserInfo:
    get:
      consumes:
      - application/json
      description: Checks if there is a valid jwt token present in the header. If
        present, validates the token and then returns the user details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.UserDetails'
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Endpoint for getting user details
      tags:
      - Auth
  /auth/google:
    get:
      consumes:
      - application/json
      description: Will redirect user to google OAuth consent screen
      parameters:
      - description: The url to redirect to after authentication
        in: query
        name: redirect_uri
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Endpoint for logging in the user using google Oauth 2
      tags:
      - Auth
  /auth/google/callback:
    get:
      consumes:
      - application/json
      description: Will handle the google OAuth call back and redirect to homepage
        with the token in the url
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Endpoint for handling the google OAuth callback
      tags:
      - Auth
  /auth/isLoggedIn:
    get:
      consumes:
      - application/json
      description: Checks if there is a valid jwt token present in the headers.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Endpoint for checking if user is logged in
      tags:
      - Auth
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
